package es.valencia.services.nie.comunicaciones.v20;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * This class was generated by Apache CXF 2.7.18
 * 2016-05-02T11:41:08.006+02:00
 * Generated source version: 2.7.18
 * 
 */
@WebService(targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", name = "ComunicacionesPortType")
@XmlSeeAlso({es.valencia.schema.nie.unidadorganizativa.ObjectFactory.class, es.valencia.schema.authorization.ObjectFactory.class, es.valencia.schema.serticfaultmessage.ObjectFactory.class, ObjectFactory.class, es.valencia.schema.tiposbase.ObjectFactory.class, es.valencia.schema.serticentidadbase.ObjectFactory.class, es.valencia.schema.nie.listadestinos.ObjectFactory.class, es.valencia.schema.nie.common.ObjectFactory.class, es.valencia.schema.nie.comunicacion.ObjectFactory.class, es.valencia.services.nie.comunicaciones.ObjectFactory.class, es.valencia.schema.headers.ObjectFactory.class})
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public interface ComunicacionesPortType {

    /**
     * Postcondiciones:
     * 				- Si el código de comunicación existe: 
     * 					- Si su estado es "En Redaccion", "Fallo en Firma", "Rechazada" o "Cancelada": se elimina.
     * 					- En otro caso se devuelve un error por esto no apto para el borrado.
     * 				- Si el código de comunicación no existe: se devuelve respuesta de éxito (idempotencia).
     * 			
     */
    @WebResult(name = "DeleteComunicacionResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/deleteComunicacion")
    public es.valencia.services.nie.comunicaciones.CodigoComunicacionResponseTypeV10 deleteComunicacion(
        @WebParam(partName = "request", name = "DeleteComunicacionRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.CodigoComunicacionRequestTypeV10 request
    ) throws EstadoIncorrectoComunicacionPostconditionFault;

    /**
     * Precondiciones:
     * 				- El código de la comunicación debe existir.
     * 			
     */
    @WebResult(name = "GetComunicacionResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/getComunicacion")
    public es.valencia.services.nie.comunicaciones.ComunicacionResponseTypeV12 getComunicacion(
        @WebParam(partName = "request", name = "GetComunicacionRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.GetComunicacionRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El código de la comunicación debe existir.
     * 				- La comunicación debe estar en estado "Firmada"" o "PendienteFirma".
     * 				- Todas las NIs de la comunicación deben estar en estado "DestinoValidado", "PendienteRecepcion" o "Recepcionada".
     * 				Postcondiciones:
     * 				- Si se encuentra en estado "Firmada": se devuelve mensaje de éxito (idempotencia).
     * 				- Si se encuentra en estado "PendienteFirma": 
     * 					- se actualiza el atributo idDocFirmado de todas las notas interiores asociadas a la comunicación.
     * 					- Para cada NI: si es manual, se cambia su estado a "PendienteRecepción", si es electrónica, se cambia a "Recepcionada".
     * 					- Para cada NI: se establece fecha de modificación y se añade hito.
     * 					- Para cada NI: se establece el destino de la comunicación, copiando los datos de la unidad receptora.
     * 					- se cambia el estado a "Firmada".
     * 					- Se establece el origen de la comunicación, copiando los datos de su unidad propietaria.
     * 					- Se establece la fecha de modificación.
     * 					- Se añade hito.
     * 			
     */
    @WebResult(name = "ToFirmadaResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/toFirmada")
    public es.valencia.services.nie.comunicaciones.ComunicacionResponseTypeV12 toFirmada(
        @WebParam(partName = "request", name = "ToFirmadaRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.ToFirmadaRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El uid de la unidad propietaria debe existir en el sistema
     * 				- Las uids de la lista deben existir en el sistema
     * 				      
     * 				Postcondiciones(Idempotencia):
     * 				- Si la lista no existe:
     * 					- se crea.
     * 					- Se establece la fecha de creación y modificación.
     * 				- Si la lista existe (se identica por uidUnidadPropietaria + nombreCastellano), y los datos cambian:
     * 					- se actualizan los datos.
     * 				 	- Se establece la fecha de  modificación.
     * 				
     * 			
     */
    @WebResult(name = "AddOrUpdateListaDestinoResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/addOrUpdateListaDestino")
    public es.valencia.services.nie.comunicaciones.ListaDestinoResponseTypeV11 addOrUpdateListaDestino(
        @WebParam(partName = "request", name = "AddOrUpdateListaDestinoRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.AddOrUpdateListaDestinoRequestTypeV10 request
    ) throws UidNoExistePreconditionFault;

    /**
     * Precondiciones:
     * 				- La Unidad Propietaria debe existir , estar vigente y habilitada para emitir comunicaciones.
     * 				- Si establece un nombre lista de destinos predefinido: debe existir y pertenecer a la Unidad Propietaria o a alguna ascendiente de primer nivel, o ser global.
     * 				- Las unidades receptoras establecidas (bien por lista o por enumeración explícita) deben existir , estar vigentes y habilitadas para recibir notas interiores.
     * 				- El responsable firma debe ser uno de los siguientes:
     * 				     - El empleado responsable de la UO Origen.
     * 				     - Si la UO Origen no es de primer nivel, el empleado resposable de la UO ascendiente de primer nivel.
     * 				     - El empleado responsable de alguna de las UOs descendientes que no sean de primer nivel.
     * 				     - El empleado sustituto de la UO Origen (si se ha establecido en la configuración de la UO Origen).
     * 				      
     * 				Postcondiciones(Idempotencia):
     * 				- Si la comunicación no existe:
     * 					- se da de alta.
     * 					- Se añade hito.
     * 					- Se establece la fecha de creación y modificación.
     * 				- Si la comunicación existe, y los datos cambian:
     * 					- se actualizan los datos.
     * 				 	- Se establece la fecha de  modificación.
     * 				
     * 			
     */
    @WebResult(name = "CreateOrUpdateComunicacionResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/createOrUpdateComunicacion")
    public es.valencia.services.nie.comunicaciones.ComunicacionResponseTypeV12 createOrUpdateComunicacion(
        @WebParam(partName = "request", name = "CreateOrUpdateComunicacionRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.CreateOrUpdateComunicacionRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El uid debe existir en el sistema.
     * 			
     */
    @WebResult(name = "FindListasUOResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/findListasUO")
    public es.valencia.services.nie.comunicaciones.FindListasUOResponseTypeV10 findListasUO(
        @WebParam(partName = "request", name = "FindListasUORequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.FindListasUORequestTypeV10 request
    ) throws UidNoExistePreconditionFault;

    /**
     * Precondiciones:
     * 				- El uid debe existir.
     * 			
     */
    @WebResult(name = "FindListasDestinoResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/findListasDestino")
    public es.valencia.services.nie.comunicaciones.FindListasDestinoResponseTypeV11 findListasDestino(
        @WebParam(partName = "request", name = "FindListasDestinoRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.FindListasDestinoRequestTypeV10 request
    ) throws UidNoExistePreconditionFault;

    /**
     * Precondiciones:
     * 				- El código de la comunicación debe existir.
     * 				- La comunicación debe estar en estado "En Redacción","Redactada","Fallo en Firma", "Rechazada", "Cancelada"
     * 				Postcondiciones:
     * 				- Si se encuentra en estado "En Redacción": se devuelve mensaje de éxito (idempotencia).
     * 				- Si se encuentra en cualquier otro estado:
     * 					- se eliminan las notas interiores asociadas a la comunicación.
     * 					- se elimina el origen de la comunicación.
     * 					- se cambia el estado a "En Redacción".
     * 					- Se establece la fecha de modificación.
     * 					- Se añade hito.
     * 			
     */
    @WebResult(name = "ToEnRedaccionResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/toEnRedaccion")
    public es.valencia.services.nie.comunicaciones.ComunicacionResponseTypeV12 toEnRedaccion(
        @WebParam(partName = "request", name = "ToEnRedaccionRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.CodigoComunicacionRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El número de registro debe existir.
     * 			
     */
    @WebResult(name = "GetNIResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/getNI")
    public es.valencia.services.nie.comunicaciones.ComunicacionResponseTypeV12 getNI(
        @WebParam(partName = "request", name = "GetNIRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.GetNIRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El código de la comunicación debe existir.
     * 				- La comunicación debe estar en estado "Rechazada" o "PendienteFirma"
     * 				Postcondiciones:
     * 				- Si se encuentra en estado "Rechazada": se devuelve mensaje de éxito (idempotencia).
     * 				- Si se encuentra en estado "PendienteFirma": 
     * 					- se eliminan las notas interiores asociadas a la comunicación.
     * 					- se elimina el origen de la comunicación.
     * 					- se cambia el estado a "Rechazada".
     * 					- Se establece la fecha de modificación.
     * 					- Se añade hito.
     * 			
     */
    @WebResult(name = "ToRechazadaResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/toRechazada")
    public es.valencia.services.nie.comunicaciones.ComunicacionResponseTypeV12 toRechazada(
        @WebParam(partName = "request", name = "ToRechazadaRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.ToRechazadaRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El código de la comunicación debe existir.
     * 				- La comunicación debe estar en estado "En Redacción", "Redactada" o "Cancelada"
     * 				- La comunicación debe tener establecidas las unidades organizativas a las que va dirigida.
     * 				Postcondiciones:
     * 				- Si se encuentra en estado "En Redacción":
     * 					- si la unidad propietaria no está vigente o no está habilitada para emitir comunicaciones, se devuelve fallo de postcondición. 
     * 					- se cambia el estado a "Redactada".
     * 					- Se establece el origen de la comunicación en base a los datos vigentes de la unidad organizativa a la que pertenece.
     * 					- Se establece la fecha de modificación.
     * 					- Se añade hito.
     * 					- Para cada unidad receptora de la comunicación:
     * 						- Se comprueba que la unidad receptora está vigente y habilitada para recibir notas interiores.
     * 							- Si no lo está se devuelve fallo de postcondición(unidad organizativa no vigente o no habilitada).
     * 						- Se añade una nota interior a la comunicación, estableciendo su número de registro.
     * 						- Se establece la fecha de creación y/o modificación.
     * 						- Se añade hito.
     * 					- Se crea el pdf a firmar.
     * 				- Si se encuentra en estado "Redactada": se devuelve mensaje de éxito (idempotencia).
     * 				
     * 			
     */
    @WebResult(name = "ToRedactadaResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/toRedactada")
    public es.valencia.services.nie.comunicaciones.ToRedactadaResponseTypeV12 toRedactada(
        @WebParam(partName = "request", name = "ToRedactadaRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.CodigoComunicacionRequestTypeV10 request
    ) throws ComunicacionPreconditionFault, ComunicacionPostconditionFault;

    /**
     * Postcondiciones:
     * 				- Si el uid existe:
     * 					- Si la lista de destino está referenciada por alguna comunicación que no esté enviada: se devuelve fallo.
     * 					- Sino: Se elimina y devuelve respuesta de éxito.
     * 				- Si el uid no existe: se devuelve respuesta de éxito (idempotencia).
     * 			
     */
    @WebResult(name = "DeleteListaDestinoResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/deleteListaDestino")
    public es.valencia.services.nie.comunicaciones.DeleteListaDestinoResponseTypeV10 deleteListaDestino(
        @WebParam(partName = "request", name = "DeleteListaDestinoRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.ListaDestinoRequestTypeV10 request
    ) throws ListaReferenciadaPostconditionFault;

    /**
     * Precondiciones:
     * 				- El código de la comunicación debe existir.
     * 				- La comunicación debe estar en estado "FalloEnFirma" o "PendienteFirma" o "Redactada"
     * 				Postcondiciones:
     * 				- Si se encuentra en estado "FalloEnFirma": se devuelve mensaje de éxito (idempotencia).
     * 				- Si se encuentra en estado "PendienteFirma" o "Redactada": 
     * 					- se eliminan las notas interiores asociadas a la comunicación.
     * 					- se elimina el origen de la comunicación.
     * 					- se cambia el estado a "FalloEnFirma".
     * 					- Se establece la fecha de modificación.
     * 					- Se añade hito.
     * 			
     */
    @WebResult(name = "ToFalloEnFirmaResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/toFalloEnFirma")
    public es.valencia.services.nie.comunicaciones.ComunicacionResponseTypeV12 toFalloEnFirma(
        @WebParam(partName = "request", name = "ToFalloEnFirmaRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.ToFalloEnFirmaRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El código de la comunicación debe existir.
     * 				- La unidad propietaria no puede estar incluida como destino.
     * 				Postcondiciones (Idempontencia):
     * 				- Si el adjunto no existe en la comunicación (el identificador de un adjunto dentro de la comunicación es su nombre):
     * 					- se añade.
     * 					- Se establece la fecha de modificación de la comunicación.
     * 				- Si el adjunto ya existe en la comunicación,
     * 					- Si el tipo es distinto, se modifica el tipo  y se establece la fecha de modificación de la comunicación.
     * 					- Si el tipo es igual, se devuelven los datos del adjunto existentes en bd, sin modificar el id ucm.
     * 				
     * 			
     */
    @WebResult(name = "AddOrUpdateAdjuntoResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/addOrUpdateAdjunto")
    public es.valencia.services.nie.comunicaciones.ComunicacionResponseTypeV12 addOrUpdateAdjunto(
        @WebParam(partName = "request", name = "AddOrUpdateAdjuntoRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.AddOrUpdateAdjuntoRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El número de registro debe existir.
     * 				- La NI debe estar en estado "Recepcionada".
     * 			
     */
    @WebResult(name = "UpdateNIResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/updateNI")
    public es.valencia.services.nie.comunicaciones.UpdateNIResponseTypeV10 updateNI(
        @WebParam(partName = "request", name = "UpdateNIRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.UpdateNIRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El uid de la unidad propietaria debe existir en el sistema.
     * 				- La lista (se identica por uidUnidadPropietaria + nombreCastellano) exista en el sistema.
     * 								      
     * 				Postcondiciones(Idempotencia):			
     * 				- Si la lista existe se añaden o eliminan los miembros.
     * 			
     */
    @WebResult(name = "UpdateMiembrosListaDestinoResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/updateMiembrosListaDestino")
    public es.valencia.services.nie.comunicaciones.UpdateMiembrosListaDestinoResponseTypeV11 updateMiembrosListaDestino(
        @WebParam(partName = "request", name = "UpdateMiembrosListaDestinoRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.UpdateMiembrosListaDestinoRequestTypeV10 request
    ) throws UidNoExistePreconditionFault;

    /**
     * Precondiciones:
     * 				- El número de registro de NI debe existir.
     * 				- La NI debe estar en estado "PendienteRecepcion" o "Recepcionada".
     * 				Postcondiciones:
     * 				- Si se encuentra en estado "Recepcionada": se devuelve mensaje de éxito (idempotencia).
     * 				- Si se encuentra en estado "PendienteRecepcion": 
     * 					- se cambia el estado de la NI a "Recepcionada".
     * 					- Se establece la fecha de modificación en NI.
     * 					- Se añade hito en NI.
     * 			
     */
    @WebResult(name = "RecepcionarNIResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/recepcionarNI")
    public es.valencia.services.nie.comunicaciones.NIResponseTypeV12 recepcionarNI(
        @WebParam(partName = "request", name = "RecepcionarNIRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.RecepcionarNIRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * 
     */
    @WebResult(name = "FindComunicacionesResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/findComunicaciones")
    public es.valencia.services.nie.comunicaciones.FindComunicacionesResponseTypeV11 findComunicaciones(
        @WebParam(partName = "request", name = "FindComunicacionesRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.FindComunicacionesRequestTypeV10 request
    );

    /**
     * Precondiciones:
     * 				- El código de la comunicación debe existir.
     * 				- La comunicación debe estar en estado "Cancelada", "Redactada" o "PendienteFirma"
     * 				Postcondiciones:
     * 				- Si se encuentra en estado "Cancelada": se devuelve mensaje de éxito (idempotencia).
     * 				- Si se encuentra en estado "PendienteFirma":
     * 					- se eliminan las notas interiores asociadas a la comunicación.
     * 					- se elimina el origen de la comunicación.
     * 					- se cambia el estado a "Cancelada".
     * 					- Se establece la fecha de modificación.
     * 					- Se añade hito con el motivo de la cancelación.
     * 			
     */
    @WebResult(name = "ToCanceladaResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/toCancelada")
    public es.valencia.services.nie.comunicaciones.ComunicacionResponseTypeV12 toCancelada(
        @WebParam(partName = "request", name = "ToCanceladaRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.ToCanceladaRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El código de la comunicación debe existir.
     * 
     * 				Postcondiciones:
     * 				- Si el adjunto existe en la comunicación: 
     * 					- se elimina.
     * 					- Se establece la fecha de modificación de la comunicación.
     * 				- Si el adjunto no existe en la comunicación: se devuelve respuesta de éxito (idempotencia)
     * 				
     * 			
     */
    @WebResult(name = "RemoveAdjuntoResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/removeAdjunto")
    public es.valencia.services.nie.comunicaciones.RemoveAdjuntoResponseTypeV12 removeAdjunto(
        @WebParam(partName = "request", name = "RemoveAdjuntoRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.RemoveAdjuntoRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;

    /**
     * Precondiciones:
     * 				- El uid debe existir.
     * 			
     */
    @WebResult(name = "GetListaDestinoResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/getListaDestino")
    public es.valencia.services.nie.comunicaciones.ListaDestinoResponseTypeV11 getListaDestino(
        @WebParam(partName = "request", name = "GetListaDestinoRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.ListaDestinoRequestTypeV10 request
    ) throws UidNoExistePreconditionFault;

    /**
     * Precondiciones:
     * 				- El código de la comunicación debe existir.
     * 				- La comunicación debe estar en estado "Pendiente Firma", "Redactada" o "Cancelada"
     * 				Postcondiciones:
     * 				- Si se encuentra en estado "Pendiente Firma": se devuelve mensaje de éxito (idempotencia).
     * 				- Si se encuentra en estado "Redactada":
     * 					- se cambia el estado a "PendienteFirma".
     * 					- Se establece la fecha de modificación.
     * 					- Se añade hito.
     * 			
     */
    @WebResult(name = "ToPendienteFirmaResponse", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20", partName = "response")
    @WebMethod(action = "http://www.valencia.es/services/nie/Comunicaciones/v20/toPendienteFirma")
    public es.valencia.services.nie.comunicaciones.ComunicacionResponseTypeV12 toPendienteFirma(
        @WebParam(partName = "request", name = "ToPendienteFirmaRequest", targetNamespace = "http://www.valencia.es/services/nie/Comunicaciones/v20")
        es.valencia.services.nie.comunicaciones.CodigoComunicacionRequestTypeV10 request
    ) throws ComunicacionPreconditionFault;
}
